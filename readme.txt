Задание:

1. На языке Python реализовать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.

   Python example:

   def isEven(value):return value%2==0

   Решение в файле paruty.py

   Плюсы решения из примера : он очень понятный + с помощью этой функции можно смотреть кратность на другие числа(не только на 2)
   Минусы решения из примера : при проверке дробных чисел float так же выдает true или false в зависимости от последней цифры в числе

   Плюсы моего решения : быстрее, чем решение из примера, т.к проверяется последняя цифра двоичной записи числа + выдает ошибку при проверке дробного числа
   Минусы моего решения : не понятен для людей, кто не знает операцию "побитовое "и" ", и не знают, как ведут себя двоичные числа


2. На языке Python (2.7) реализовать минимум по 2 класса реализовывающих циклический буфер FIFO. Объяснить плюсы и минусы каждой реализации.

    Hешение в файле Fifo.py

3. На языке Python реализовать функцию, которая быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел. Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным). Объяснить почему вы считаете, что функция соответствует заданным критериям.

    На данный момент самой быстрой сортировкой сейчас считается timsort, так, как ее сложность в лучшем случае может достигать n, в остальных случаях сложность равно O(nlog(n))